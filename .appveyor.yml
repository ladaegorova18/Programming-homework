image: Visual Studio 2019

environment:
  matrix:
    - solution_path: Tests\Task1\Task1.sln
    - solution_path: Tests\Test1.1\Task1.sln
    - solution_path: Tests\Test2.1\Test2.1.sln
    
    - solution_path: sem1\homework3\3.1\3.1.sln
    - solution_path: sem1\homework4\4.1\4.1\4.1.sln
    - solution_path: sem1\homework4\4.2\4.2.sln
    - solution_path: sem1\homework4\4.3\4.3.sln
    - solution_path: sem1\homework5\5.1\5.1.sln
    - solution_path: sem1\homework5\5.2\5.2.sln
    - solution_path: sem1\homework6\6.1\6.1.sln
    - solution_path: sem1\homework6\6.2\6.2.sln
    - solution_path: sem1\homework6\6.3\6.3.sln
    - solution_path: sem1\homework6\6.4\6.4.sln
    - solution_path: sem1\homework7\7.1.1\7.1.1.sln
    - solution_path: sem1\homework7\7.2\7.2.sln
    - solution_path: sem1\homework8\AVL-Tree\AVL-Tree.sln
    - solution_path: sem1\homework9\Hash-Table\Hash-Table.sln
    - solution_path: sem1\homework10\Graph\Graph.sln
    - solution_path: sem1\homework11\11.1\11.2.sln
    - solution_path: sem1\homework11\Spanning_Tree\Spanning_Tree.sln
    - solution_path: sem1\tests\2.1\2.1.sln
    - solution_path: sem1\tests\2.2\2.2.sln
    - solution_path: sem1\tests\3.1\3.1.sln
    - solution_path: sem1\tests\3.2\3.2.sln
    - solution_path: sem1\tests\3.3\3.3.sln
    
    - solution_path: sem2\homework1\Factorial\Factorial.sln
    - solution_path: sem2\homework1\Fibonacci\Fibonacci.sln
    - solution_path: sem2\homework1\MatrixSorting\MatrixSorting.sln
    - solution_path: sem2\homework1\Sorting\Sorting.sln
    - solution_path: sem2\homework1\Spiral\Spiral.sln
    - solution_path: sem2\homework2\Hash-Table\Hash-Table.sln
    - solution_path: sem2\homework2\OneLinkedList\OneLinkedList.sln
    - solution_path: sem2\homework2\Stack_Calculator\StackCalculator.sln
    - solution_path: sem2\homework3\Hash-Table\Hash-Table.sln
    - solution_path: sem2\homework4\ParseTree\ParseTree.sln
    - solution_path: sem2\homework4\UniqueList\UniqueList.sln
    - solution_path: sem2\homework6\ConsoleGame\ConsoleGame.sln
    - solution_path: sem2\homework6\ListMethods\ListMethods.sln
    - solution_path: sem2\homework7\Clock\Clock.sln
    - solution_path: sem2\homework8\GenericList\GenericList.sln
    - solution_path: sem2\homework8\GenericSet\GenericSet.sln
    
    - solution_path: sem3\homework1\LazyInterface\LazyInterface.sln
    - solution_path: sem3\homework2\MyThreadPool\MyThreadPool.sln
    - solution_path: sem3\homework3\SimpleFTP\SimpleFTP.sln
    - solution_path: sem3\homework4\MyNUnit\MyNUnit.sln
    - solution_path: sem3\homework5\GUIForServer\GUIForServer.sln
    - solution_path: sem3\Tests\Test1\Test1.sln
    - solution_path: sem3\Tests\Test2\Test2.sln

    - solution_path: sem4\CalculateBuilder\CalculateBuilder.sln
    - solution_path: sem4\InfinitePrimes\InfinitePrimes.sln
    - solution_path: sem4\WebDownloader\WebDownloader.sln
    - solution_path: sem4\LambdaInterpreter\LambdaInterpreter.sln
    - solution_path: sem4\LocalNetwork\LocalNetwork.sln
    - solution_path: sem4\LazyAdvanced\LazyAdvanced.sln
    - solution_path: sem4\Factorial\Factorial.sln
    - solution_path: sem4/EvenNumbers/EvenNumbers.sln
    - solution_path: sem4/ParseTree/ParseTree.sln
    - solution_path: sem4/MapForTrees/MapForTrees.sln
    - solution_path: sem4\BracketsChecker\BracketsChecker.sln
    - solution_path: sem4/Pointfree/Pointfree.sln
    - solution_path: sem4\PhoneBook\PhoneBook.sln
    - solution_path: sem4\SpecifiedAccuracy\SpecifiedAccuracy.sln
    - solution_path: Tests\Task1\Task1.sln

before_build:
  - ps: |
      $desiredSdkVersion = "2.1.300"
      
      # Check if the specific .NET Core SDK version is installed
      $installedSdks = & "C:\Program Files\dotnet\dotnet.exe" --list-sdks
      if ($installedSdks -notcontains "$desiredSdkVersion" -and $env:solution_path -match "\.sln$") {
        Write-Host "SDK version $desiredSdkVersion is not installed. Installing..."
        Invoke-WebRequest -Uri https://builds.dotnet.microsoft.com/dotnet/Sdk/2.1.300/dotnet-sdk-2.1.300-win-x64.exe -OutFile dotnet-sdk-2.1.300-win-x64.exe
        Start-Process -FilePath dotnet-sdk-2.1.300-win-x64.exe -ArgumentList "/quiet", "/install" -Wait
      } else {
        Write-Host "SDK version $desiredSdkVersion is already installed."
      }

      # Only run nuget restore if the solution is a .sln file
      if ($env:solution_path -match "\.sln$") {
        nuget restore "$env:solution_path"
      } else {
        Write-Host "Skipping nuget restore for non-solution file: $env:solution_path"
      }

build_script:
  - ps: |
      if ($env:solution_path -match "\.cpp$") {
        Write-Host "Compiling C++ file: $env:solution_path"
        $exePath = $env:solution_path.Replace('.cpp', '.exe')
        $cmd = "`"C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Auxiliary\Build\vcvars64.bat`" && cl $env:solution_path /Fe:$exePath"
        cmd /c $cmd
        if ($LASTEXITCODE -ne 0) {
          Write-Error "Compilation failed with exit code $LASTEXITCODE"
        }
        cmake "-G%GENERATOR%" -H. -B_builds
        cmake --build _builds --config "%CONFIG%"
      } elseif ($env:solution_path -match "\.c$") {
        Write-Host "Compiling C file: $env:solution_path"
        $exePath = $env:solution_path.Replace('.c', '.exe')
        $cmd = "`"C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Auxiliary\Build\vcvars64.bat`" && cl $env:solution_path /Fe:$exePath"
        cmd /c $cmd
        if ($LASTEXITCODE -ne 0) {
          Write-Error "Compilation failed with exit code $LASTEXITCODE"
        }
      } else {
        Write-Host "Building .NET Solution: $env:solution_path"
        msbuild "$env:solution_path"
      }

after_build:
  - ps: |
      # If the solution is a C/C++ file, run the executable (assuming it's compiled)
      if ($env:solution_path -match "\.cpp$" -or $env:solution_path -match "\.c$") {
        $exePath = "$($env:solution_path.Replace('.cpp','.exe').Replace('.c','.exe'))"
        if (Test-Path $exePath) {
          Write-Host "Running $exePath"
          & $exePath
        } else {
          Write-Host "Executable not found: $exePath"
        }
      } else {
        $solutionDir = Split-Path "$env:solution_path"
        $testProjects = Get-ChildItem -Path $solutionDir -Include *.Tests.fsproj,*Tests.csproj -File -Recurse
        if ($testProjects.Count -eq 0) {
          Write-Host "No test projects found in $solutionDir or subfolders."
        } else {
          $testProjects | ForEach-Object {
            Write-Host "Running tests in $($_.FullName)"
            }
          }
        }
